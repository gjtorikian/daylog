{"ts":1352432432957,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Your extension for Cloud9 IDE.\n * \n * This extension demonstrates the ability to communicate with a server-side\n * extension.\n */\ndefine(function(require, exports, module) {\n\nvar ext = require(\"core/ext\");\nvar ide = require(\"core/ide\");\nvar util = require(\"core/util\");\nvar c9console = require(\"ext/console/console\");\nvar menus = require(\"ext/menus/menus\");\nvar commands = require(\"ext/commands/commands\");\nvar GitLogParser = require(\"./gitlogparser.js\");\nvar markup = require(\"text!./gitlog.xml\");\n\nmodule.exports = ext.register(\"ext/gitlog/gitlog\", {\n    name     : \"gitlog\",\n    dev      : \"You\",\n    alone    : true,\n    deps     : [],\n    type     : ext.GENERAL,\n    markup   : markup,\n\n    nodes : [],\n\n    init : function(){\n        var _self = this;\n        this.nodes.push(\n            menus.addItemByPath(\"Tools/Git/Log\", new apf.item({\n                onclick : function(){\n                    winGitLog.show();\n                    _self.getGitLog();\n                },\n                isAvailable : function(editor){\n                    return ide.onLine;\n                }\n            }), 5400)\n        );\n        \n        this.$onMessage = this.onMessage.bind(this);\n        ide.addEventListener(\"socketMessage\", this.$onMessage);\n        \n        this.gitLogParser = new GitLogParser();\n    },\n    \n    getGitLog : function(){\n        mdlGitLog.load(\"<logs />\");\n\n        var cmd = \"git\";\n\n        var data = {\n            command: cmd,\n            argv: [\"git\", \"log\", \"--format=raw\"],\n            extra: { type: \"gitlog\" },\n            requireshandling: !commands.commands.git,\n            cwd : c9console.getCwd()\n        };\n        // @todo should we change server side plugin to not require this?\n        data.line = data.argv.join(\" \");\n        \n        ide.dispatchEvent(\"track_action\", {type: \"gitlog\", cmd: cmd});\n        if (ext.execCommand(cmd, data) !== false) {\n            if (ide.dispatchEvent(\"consolecommand.\" + cmd, {data: data}) !== false) {\n                ide.send(data);\n            }\n        }\n    },\n    \n    onMessage : function(e){\n        var message = e.message;\n\n        if (!message.extra || message.extra.type != \"gitlog\")\n            return false;\n\n        var type = message.type.substr(-5);\n        if (type == \"-exit\") {\n            message.code && util.alert(\n                \"Error\", \"There was an error returned from the server:\",\n                message.data\n            );\n            return;\n        }\n\n        // Is the body coming in piecemeal? Process after this message\n        if (type != \"-data\" || !message.data)\n            return;\n\n        this.gitLogParser.parseLog(message.data);\n\n        // Get the results of the parsing\n        var parseResult = this.gitLogParser.getLogData();\n        for (var i = 0, len = parseResult.length; i < len; i++) {\n            mdlGitLog.appendXml(apf.n(\"<log/>\")\n                .attr(\"hash\", parseResult[i].commit.substr(0, 9))\n                .attr(\"author\", parseResult[i].committer.fullName)\n                .attr(\"date\", parseResult[i].committer.timestamp)\n                .attr(\"message\", parseResult[i].message.join(\" \")).node());\n        }\n    },\n\n    enable : function(){\n        this.nodes.each(function(item){\n            item.enable();\n        });\n    },\n\n    disable : function(){\n        this.nodes.each(function(item){\n            item.disable();\n        });\n    },\n\n    destroy : function(){\n        menus.remove(\"Tools/Git/Log\");\n        ide.removeEventListener(\"socketMessage\", this.$onMessage);\n        this.nodes.each(function(item){\n            item.destroy(true, true);\n        });\n        this.nodes = [];\n    }\n});\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":3649}]],"length":3649}
{"contributors":[],"silentsave":false,"ts":1352432517810,"patch":[[{"diffs":[[0,"ols/Git/"],[-1,"Log"],[1,"Sheep"],[0,"\", new a"]],"start1":825,"start2":825,"length1":19,"length2":21}]],"length":3651,"saved":false}
