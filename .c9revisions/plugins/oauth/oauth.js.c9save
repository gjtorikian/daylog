{"ts":1341898862402,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports = function setup(options, imports, register) {\n    var OAuth = require('oauth').OAuth;\n    register(null, {\n        oauth: {\n            authenticate: function (username, password, callback) {\n                \n            }\n        }\n    });\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":260}]],"length":260}
{"contributors":[],"silentsave":false,"ts":1341901211820,"patch":[[{"diffs":[[0,"').OAuth"],[1,"2;\n    var oa = new OAuth(options.appId,\n                        options.appSecret,\n                        \"https://github.com/\",\n                        \"login/oauth/authorize\",\n                        \"login/oauth/access_token\")"],[0,";\n"],[-1,""],[0,"    regi"]],"start1":92,"start2":92,"length1":18,"length2":249},{"diffs":[[0,"back) {\n"],[-1,"                "],[0,"\n       "]],"start1":431,"start2":431,"length1":32,"length2":16}]],"length":475,"saved":false}
{"ts":1341901276738,"patch":[[{"diffs":[[0,"pId,"],[-1,"\n                        options.appSecret,\n                        \"https://github.com/\",\n                        \"login/oauth/authorize\",\n                        \"login/oauth/access_token\");\n    register(null, {\n        oauth: {\n            authenticate: function (username, password, callback) {\n"],[1," options.appSecret, \"https://github.com/\", \"login/oauth/authorize\", \"login/oauth/access_token\");\n    register(null, {\n        oauth: {\n            authenticate: function(username, password, callback) {\n                var parsedUrl = url.parse(request.originalUrl, true);\n                var self = this;\n                if (request.getAuthDetails()['github_login_attempt_failed'] === true) {\n                    // Because we bounce through authentication calls across multiple requests\n                    // we use this to keep track of the fact we *Really* have failed to authenticate\n                    // so that we don't keep re-trying to authenticate forever.\n                    // (To clarify this infinite retry that we're stopping here would only\n                    //  occur when the attempt has failed, not when it has succeeded!!!)\n                    delete request.getAuthDetails()['github_login_attempt_failed'];\n                    self.fail(callback);\n                }\n                else {\n                    if (parsedUrl.query && parsedUrl.query.code) {\n                        my._oAuth.getOAuthAccessToken(parsedUrl.query.code, {\n                            redirect_uri: my._redirectUri\n                        }, function(error, access_token, refresh_token) {\n                            if (error) callback(error)\n                            else {\n                                request.session[\"access_token\"] = access_token;\n                                if (refresh_token) request.session[\"refresh_token\"] = refresh_token;\n                                my._oAuth.getProtectedResource(\"https://api.github.com/user\", request.session[\"access_token\"], function(error, data, response) {\n                                    if (error) {\n                                        request.getAuthDetails()['github_login_attempt_failed'] = true;\n                                        self.fail(callback);\n                                    }\n                                    else {\n                                        self.success(JSON.parse(data), callback)\n                                    }\n                                })\n                            }\n                        });\n                    }\n                    else if (parsedUrl.query && parsedUrl.query.error) {\n                        request.getAuthDetails()['github_login_attempt_failed'] = true;\n                        self.fail(callback);\n                    }\n                    else {\n                        request.session['github_redirect_url'] = request.originalUrl;\n                        var redirectUrl = my._oAuth.getAuthorizeUrl({\n                            redirect_uri: my._redirectUri,\n                            scope: my.scope\n                        })\n                        self.redirect(response, redirectUrl, callback);\n                    }\n                }"],[0,"\n   "]],"start1":136,"start2":136,"length1":307,"length2":2913},{"diffs":[[0,"  });\n};"],[-1,"\n"],[0,""],[1,""]],"start1":3072,"start2":3072,"length1":9,"length2":8}]],"length":3080,"saved":false}
{"contributors":[],"silentsave":false,"ts":1341901339399,"patch":[[{"diffs":[[0,"s.appId,"],[1,"\n       "],[0," options"]],"start1":132,"start2":132,"length1":16,"length2":24},{"diffs":[[0,"pSecret,"],[1,"\n       "],[0," \"https:"]],"start1":159,"start2":159,"length1":16,"length2":24},{"diffs":[[0,"b.com/\","],[1,"\n       "],[0," \"login/"]],"start1":190,"start2":190,"length1":16,"length2":24},{"diffs":[[0,"horize\","],[1,"\n       "],[0," \"login/"]],"start1":223,"start2":223,"length1":16,"length2":24},{"diffs":[[0,"oken\");\n"],[1,"\n"],[0,"    regi"]],"start1":261,"start2":261,"length1":16,"length2":17}]],"length":3113,"saved":false}
{"ts":1341901555575,"patch":[[{"diffs":[[0,"unction("],[1,"request, response, "],[0,"username"]],"start1":335,"start2":335,"length1":16,"length2":35}]],"length":3132,"saved":false}
{"ts":1341901690807,"patch":[[{"diffs":[[0,"OAuth2;\n"],[1,"    var url = require(\"url\");\n\n"],[0,"    var "]],"start1":95,"start2":95,"length1":16,"length2":47},{"diffs":[[0,".appId,\n"],[-1,""],[0,"        "]],"start1":164,"start2":164,"length1":16,"length2":16},{"diffs":[[0,"            "],[-1,"my._oAuth"],[1,"oa"],[0,".getOAuthAcc"]],"start1":1317,"start2":1317,"length1":33,"length2":26},{"diffs":[[0,"        "],[-1,"my._oAuth"],[1,"oa"],[0,".getProt"]],"start1":1803,"start2":1803,"length1":25,"length2":18},{"diffs":[[0,"l = "],[-1,"my._oAuth"],[1,"oa"],[0,".get"]],"start1":2841,"start2":2841,"length1":17,"length2":10}]],"length":3142,"saved":false}
